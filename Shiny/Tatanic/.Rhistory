shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
set.seed(1)
rfTune<-randomForest(Survived~pClass+Sex+Age+Parch+SibSp,data=data,importance=T,proximity=T)
rfTune<-randomForest(Survived~Pclass+Sex+Age+Parch+SibSp,data=data,importance=T,proximity=T)
plot(rfTune)
pr_rf <- predict(rfTune, newdata = test)
rf_CM <- confusionMatrix(pr_rf, test$Survived, positive = "1")
rf_CM
pr_rf <- predict(rfTune, newdata = values)
pr_rf <- predict(rfTune, newdata = output$values)
pr_rf <- predict(rfTune, newdata = output$values)
shiny::runApp()
verbatimTextOutput(pr_rf <- predict(rfTune, newdata = 'output$values'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(training)
View(training)
rfTune<-randomForest(Survived ~ Pclass+Sex+Age+Parch+SibSp,data=data,importance=T,proximity=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pr_rf <- predict(rfTune, newdata = 'values')
pr_rf <- predict(rfTune, newdata = values)
pr_rf <- predict(rfTune, newdata = output)
shiny::runApp()
shiny::runApp()
??outputOptions
erbatimTextOutput(pr_rf <- predict(rfTune, newdata = outputOptions(output)))
pr_rf <- predict(rfTune, newdata = outputOptions(output))
shiny::runApp()
pr_rf <- predict(rfTune, newdata = outputOptions(output$values)
pr_rf <- predict(rfTune, newdata = outputOptions(output$values))
library(shiny)
pr_rf <- predict(rfTune, newdata = outputOptions(output$values))
library(shiny)
pr_rf <- predict(rfTune, newdata = outputOptions(output$values))
shiny::runApp()
shiny::runApp()
shiny::runApp()
pr_rf <- predict(rfTune, newdata = output)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
set.seed(1)
rfTune<-randomForest(Survived ~ Pclass+Sex+Age+Parch+SibSp,data=data,importance=T,proximity=T)
plot(rfTune)
library(shiny)
shinyServer(function(input, output,session) {
# You can access the values of the widget (as a vector)
# with input$checkGroup, e.g.
output$values <- renderPrint({
list(Name = input$text, Sex = input$Sex,  Sibsp= ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0),
Parch=ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0),
Age = input$num1,Pclass=input$Pclass)
})
})
pr_rf <- predict(rfTune, newdata = output)
pr_rf <- predict(rfTune, newdata = output$values)
pr_rf <- predict(rfTune, newdata = values)
shiny::runApp()
shiny::runApp()
output$prediction<-predict(rfTune,newdata=cbind(Name = input$text, Sex = input$Sex,  Sibsp= ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0),
Parch=ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0),
Age = input$num1,Pclass=input$Pclass))
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
??cbind
?cbind
newdata=cbind(Sex = as.factor(input$Sex),
SibSp= as.factor(ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0)),
Parch=as.factor(ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0)),
Age = as.numeric(input$num1),Pclass= as.factor(input$Pclass)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rfTune<-randomForest(Survived ~ Sex+SibSp+Parch+Age+Pclass,data=data,importance=T,proximity=T)
newdata=cbind(Sex = as.factor(input$Sex),
SibSp= as.factor(ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0)),
Parch=as.factor(ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0)),
Age = as.numeric(input$num1),Pclass= as.factor(input$Pclass))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(training)
---
title: "Tatanic survival prediction"
author: "Xinjun Zhang"
date: "Mar. 15th, 2016"
output: ioslides_presentation
---
## Tatanic tragedy
![Sinking of the Tatanic, 15 April 1912](titanic-sink.jpg)
*Sinking of the Tatanic, 15 April 1912*
<span style="color:red">**1514**</span> out of 2224 were dead
## Data Overview
```{r, echo = F }
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
```
```{r, echo=FALSE, results='hide',message=FALSE}
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
```
## Preprocessing the data
-change column "Parch" and "Sibsp" to 0 or 1
-change column "Survived", "Pclass", "Sex", "Age", "Embarked", "Parch" to factor
-change column "Age","Fare" to number
-remove column "ID","Name","Ticket","Cabin" (too many NAs)
-remove NAs in all other column
## Summary of preprocessed data
```{r, echo=F, comment=NA}
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
```
## Exploring the dataset: Passenger Class and Fare
```{r,echo=F}
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
```
## Exploring the dataset: Age
```{r,echo=F}
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
```
## Exploring the dataset: Women and Children First?
```{r,echo=F}
ggplot(data, aes(Age, fill = factor(Survived))) +
geom_histogram(binwidth = 2) +
facet_grid(.~Sex) +
theme_few()
```
## Exploring the dataset: Women First?
```{r}
ggplot(data, aes(x=Sex,  fill=Survived)) +
geom_bar(position="dodge", colour="black") +
scale_fill_brewer(palette="Pastel1")
```
## Exploring the dataset:Fare
```{r,echo=F}
ggplot(data, aes(Fare, fill = factor(Survived))) +
geom_histogram() +
facet_grid(.~Sex) +
theme_few()
```
```{r, echo=F,results='hide',message=FALSE}
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.003))
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
```
##rpart training
```{r}
plot(rtTune)
rtTune$bestTune
```
## FancyRpartPlot
```{r}
fancyRpartPlot(rtTune$finalModel)
```
## Test Data Prediction
```{r, echo=FALSE, font_adjustment: -3}
pr_rt <- predict(rtTune, newdata = test)
rt_CM <- confusionMatrix(pr_rt, test$Survived, positive = "1")
rt_CM
```
## ROC Curve
```{r, echo=F}
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
```
## What if use random forest training
```{r}
set.seed(1)
rfTune<-randomForest(Survived~.,data=data,importance=T,proximity=T)
plot(rfTune)
```
## Rank importance
```{r}
varImpPlot(rfTune,main="Importance of Random Forest Training")
```
## Test Data Prediction
```{r,echo=F, comment=NA}
#prediction for randomForest
pr_rf <- predict(rfTune, newdata = test)
rf_CM <- confusionMatrix(pr_rf, test$Survived, positive = "1")
rf_CM
```
## ROC Curve
```{r, echo=F}
probsTrain<-predict(rfTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
```
```{r, echo=F,  results='hide',message=FALSE}
testdata$Parch[testdata$Parch !=0]<-1
testdata$SibSp[testdata$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
testdata[,col_names] <- lapply(testdata[,col_names], factor)
testdata$Age<-as.numeric(testdata$Age)
testdata$Fare<-as.numeric(testdata$Fare)
testdata<-testdata[,-c(1,4,9,11)]
testdata<-na.omit(testdata)
```
## Predict the test dataset
```{r}
pr_rf <- predict(rfTune, newdata = testdata)
# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
# Write the solution to file
write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
```
levels(training)
levels(training$Age)
levels(training$Sex)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(training)
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(training$Sex)
levels(newdata$Sex)
pr_rf <- predict(rfTune, newdata = testdata)
shiny::runApp()
shiny::runApp()
str(training)
data<-data[,data$Embarked]
shiny::runApp()
shiny::runApp()
View(data)
View(data)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
View(data)
View(data)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11,12)]
data<-na.omit(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
set.seed(1)
rfTune<-randomForest(Survived ~ Sex+SibSp+Parch+Age+Pclass,data=data,importance=T,proximity=T,type="class")
plot(rfTune)
library(shiny)
shinyServer(function(input, output,session) {
output$values <- renderPrint({
list(Name = input$text, Sex = as.factor(ifelse(input$Sex!=0,"female","male")),
SibSp= as.factor(ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0)),
Parch=as.factor(ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0)),
Age = as.numeric(input$num1),Pclass= as.factor(input$Pclass))
})
output$prediction<-renderPrint({predict(rfTune,
newdata=cbind(Sex = as.factor(ifelse(input$Sex!=0,"female","male")),
SibSp= as.factor(ifelse(as.numeric(input$Marriage)+as.numeric(input$Sib)!=0,1,0)),
Parch=as.factor(ifelse(as.numeric(input$Parents)+as.numeric(input$Children)!=0,1,0)),
Age = as.numeric(input$num1),Pclass= as.factor(input$Pclass)))
})
})
shiny::runApp()
shiny::runApp()
probsTrain<-predict(rtTune,training,type = "prob")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("mattflor/chorddiag", build_vignettes = TRUE)
install_github("mattflor/chorddiag", build_vignettes = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
