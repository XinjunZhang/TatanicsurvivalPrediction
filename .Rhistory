data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
summary(data)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
fancyRpartPlot(rtTune$finalModel)
?fancyRpartPlot
installed.packages("ggplot2")
install.packages("ggthemes")
mosaicplot(table(data$Parch, data$Survived), main='Family Size by Survival', shade=TRUE)
theme_few()
ggplot(data[data$Pclass],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
ggplot2(data[data$Pclass],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
library(ggplot2) # visualization
ggplot(data[data$Pclass],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
ggplot(data[data$Pclass],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
ggplot(data[data$Pclass],
aes(x = data$Fare)) +
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
ggplot(data[data$Pclass],
aes(x = data$Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
ggplot(data[data$Pclass],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
ggplot(data, aes(x=Fare, y=Pclass, fill=factor(Survived))]+
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
data$Age<-as.numeric(data$Age)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
summary(data)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
par(mfrow=c(1,2))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
par(mfrow=c(1,2))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
ggplot(data, aes(x = data$Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
par(mfrow=c(1,2))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
ggplot(data, aes(x = data$Embarked, y = data$Fare, fill = factor(data$Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
par(mfrow=c(1,2))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
par(mfrow=c(1,2))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
imp <- importance(rfTune, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
imp <- importance(rfTune, type=1)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
par(mfrow=c(1,2))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
imp <- importance(rfTune, type=1)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
fancyRpartPlot(rtTune$finalModel)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
pr_rt <- predict(rtTune, newdata = test)
rt_CM <- confusionMatrix(pr_rt, test$Survived, positive = "1")
rt_CM
set.seed(1)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),
metric="Kappa",prox=TRUE,allowParallel=TRUE)
plot(rfTune)
rfTune$bestTune
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
plot(rtTune)
rtTune$bestTune
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
imp <- importance(rfTune, type=1)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
pr_rt <- predict(rtTune, newdata = test)
rt_CM <- confusionMatrix(pr_rt, test$Survived, positive = "1")
rt_CM
par(mfrow=c(1,2))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
imp <- importance(rfTune, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
#prediction for randomForest
pr_rf <- predict(rfTune, newdata = test)
rf_CM <- confusionMatrix(pr_rf, test$Survived, positive = "1")
rf_CM
plot(rtTune)
rtTune$bestTune
set.seed(1)
rfTune<-randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
plot(rfTune)
rfTune$bestTune
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
fancyRpartPlot(rtTune$finalModel)
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
?extractFeatures
??extractFeatures
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
library(methods)
rfTune<-randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
library(randomForest)
rfTune<-randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
install.packages("sdef")
library(sdef)
rfTune<-randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
varImp(fit)
?varImpPlot
?randomForest
rfTune<-randomForest(Survived~.,data=data,importance(=T,proximity=T))
rfTune<-randomForest(Survived~.,data=data,importance=T,proximity=T))
rfTune<-randomForest(Survived~.,data=data,importance=T,proximity=T)
plot(rfTune)
rfTune$bestTune
```
```{r}
varImpPlot(rfTune)
?varImpPlot
varImpPlot(rfTune,main="Importance of Random Forest Training")
varImpPlot(rfTune,main="Importance of Random Forest Training",color = par("fg"), gcolor = par("fg"), lcolor = "gray")
varImpPlot(rfTune,main="Importance of Random Forest Training",color = "fg", gcolor = par("fg"), lcolor = "gray")
varImpPlot(rfTune,main="Importance of Random Forest Training",color = par("fg"), gcolor = par("fg"), lcolor = "gray")
varImpPlot(rfTune,main="Importance of Random Forest Training",
cex = par("cex"), pch = 21, gpch = 21, bg = par("bg"),
color = par("fg"), gcolor = par("fg"), lcolor = "gray")
prediction <- predict(pr_rt, testdata)
submit <- data.frame(testdata, Survived = prediction)
write.csv(submit, file = "rt.csv", row.names = FALSE)
pr_rf <- predict(rfTune, newdata = test)
rf_CM <- confusionMatrix(pr_rf, test$Survived, positive = "1")
rf_CM
#prediction for randomForest
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
testdata<-read.csv("Tatanic/test.csv",na.strings=c("","NA"))
str(data)
par(mfrow=c(1,2))
ggplot(data, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
set.seed(1)
rfTune<-randomForest(Survived~.,data=data,importance=T,proximity=T)
plot(rfTune)
plot(rtTune)
rtTune$bestTune
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
data$Parch[data$Parch !=0]<-1
data$SibSp[data$SibSp !=0]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch", "SibSp")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$Fare<-as.numeric(data$Fare)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
library(dplyr)
library(caret)
library(rpart)
library(stringr)
library(rattle)
library(pROC)
library(randomForest)
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales)
par(mfrow=c(1,2))
hist(data$Age, freq=F, main='Age',
col='darkgreen', ylim=c(0,0.04))
hist(data$Fare, freq=F, main='Fare',
col='lightgreen', ylim=c(0,0.04))
pr_rt <- predict(rtTune, newdata = test)
rt_CM <- confusionMatrix(pr_rt, test$Survived, positive = "1")
rt_CM
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
ggplot(data, aes(Age, fill = factor(Survived))) +
geom_histogram() +
# I include Sex since we know (a priori) it's a significant predictor
facet_grid(.~Sex) +
theme_few()
fancyRpartPlot(rtTune$finalModel)
varImpPlot(rfTune,main="Importance of Random Forest Training",
cex = par("cex"), pch = 21, gpch = 21, bg = par("bg"),
color = par("fg"), gcolor = par("fg"), lcolor = "gray")
pr_rt <- predict(rtTune, newdata = test)
rt_CM <- confusionMatrix(pr_rt, test$Survived, positive = "1")
rt_CM
