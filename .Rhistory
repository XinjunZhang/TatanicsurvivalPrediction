# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
ctrl <- train(method = "cv", number = 10,
verboseIter = T)
library(rpart)
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
??trainControl
library(caret)
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked, data = train,
method = "rpart",
tuneGrid = rtGrid,
metric='RMSE',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
confusionMatrix(predict(rtTune, train), class_data[train], positive = "1")
confusionMatrix(predict(rtTune, train), train, positive = "1")
??confusionMatrix
confusionMatrix(train,Survived, positive = "1")
confusionMatrix(train,Survived, positive == "1")
confusionMatrix(train$Survived, positive == "1")
confusionMatrix(train$Survived, positive == 1)
confusionMatrix(train$Survived, positive = 1)
confusionMatrix(train,train$Survived, positive = 1)
train<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
rtModel1<-rpart(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,train,cp=0.005)
View(train)
View(train)
col_names<-c("survived","Pclass","Sex","Age","Embarked")
train[,col_names] <- lapply(train[,col_names] , factor)
col_names<-c("Survived","Pclass","Sex","Age","Embarked")
train[,col_names] <- lapply(train[,col_names], factor)
summary(train)
data<-read.csv("Tatanic/train.csv")
col_names<-c("Survived","Pclass","Sex","Age","Embarked")
data[,col_names] <- lapply(data[,col_names], factor)
summary(data)
rtModel1<-rpart(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,train,cp=0.005)
plot(rtModel1)
library(rattle)
fancyRpartPlot(rtModel1)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
rtModel1<-rpart(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,train,cp=0.005)
plot(rtModel1)
library(rattle)
fancyRpartPlot(rtModel1)
rtGrid <- expand.grid(cp=seq(0.01, 0.2, by = 0.005))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked, data = train,
method = "rf",
tuneGrid = rtGrid,
metric='RMSE',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
confusionMatrix(train,train$Survived, positive = 1)
dummies <- dummyVars(~ ., data = data, sep = "_")
filtereddata <- data.frame( predict(dummies, data))
str(filtereddata)
rtModel1<-rpart(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,train,cp=0.005)
plot(rtModel1)
library(rattle)
fancyRpartPlot(rtModel1)
data<-data[,-name]
data<-data[,-data$name]
data<-data[,-"name"]
data<-data[,-"Name"]
data<-data[,-data$Name]
data<-data[,-c(1,4,9)]
dummies <- dummyVars(~ ., data = data, sep = "_")
filtereddata <- data.frame( predict(dummies, data))
str(filtereddata)
rtModel1<-rpart(Survived~.,filtereddata,cp=0.005)
plot(rtModel1)
data<-data[,-c(1,4,9,11)]
dummies <- dummyVars(~ ., data = data, sep = "_")
filtereddata <- data.frame( predict(dummies, data))
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
col_names<-c("Survived","Pclass","Sex","Age","Embarked")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[,-c(1,4,9,11)]
dummies <- dummyVars(~ ., data = data, sep = "_")
filtereddata <- data.frame( predict(dummies, data))
str(filtereddata)
rtModel1<-rpart(Survived~.,filtereddata,cp=0.005)
data<-na.omit(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-mutate(Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
data<-mutate(data.Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
?mutate
data<-mutate(.data,Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
data<-mutate(data,Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
library(stringr)
data<-mutate(data,Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
data<-data[!data$Embarked == "",]
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-mutate(data,Parch=str_replace_all(Parch,c("1","2","3","4","5","6"),">0"))
data<-data[!data$Embarked == "",]
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-mutate(data,Parch=str_replace_all(Parch,c("2","3","4","5","6"),"1"))
data<-data[!data$Embarked == "",]
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
?str_replace_all
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
str_replace_all(data$Parch,c("2","3","4","5","6"),"1")
summary(data)
data<-mutate(data,Parch=str_replace_all(Parch,c("2","3","4","5","6"),"1"))
summary(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data<-mutate(data,Parch=str_replace_all(Parch,c("2","3","4","5","6"),"1"))
col_names<-c("Survived","Pclass","Sex","Age","Embarked")
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data %>%
mutate(Parch=str_replace_all(Parch,c("2","3","4","5","6"),"1"))
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data$Parch<-as.character(data$Parch)
data %>%
mutate(Parch=str_replace_all(Parch,c("2","3","4","5","6"),"1"))
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data$Parch[data$Parch == c("2","3","4","5","6")]<-1
?or
data$Parch[data$Parch == 2|3|4|5|6]<-1
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch == 2|3|4|5|6]<-1
summary(data)
data$Parch[data$Parch == 2|3|4]<-1
summary(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch == 2|3|4]<-1
summary(data)
data<-read.csv("Tatanic/train.csv")
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch !=0]<-1
summary(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[!data$Embarked == "",]
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
data$Embarked[data$Embarked==""]<-na
data%>%mutate(Embarked=str_replace(Embarked,"","NA"))
data<-data%>%mutate(Embarked=str_replace(Embarked,"","NA"))
data<-data%>%mutate(Embarked=str_replace(Embarked,"","NA"))
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
View(data)
View(data)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch !=0]<-1
summar(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
set.seed(96)
inTrain <- createDataPartition(ddata$Survived, p = .8,
list = FALSE,
times = 1)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.01, 0.2, by = 0.005))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='RMSE',
trControl = ctrl)
rtTune
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
plot(rtTune)
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
fancyRpartPlot(rtTune$finalModel)
confusionMatrix(train,train$Survived, positive = 1)
fancyRpartPlot(rtTune$finalModel)
pr_ct <- predict(rtTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, training$Survived, positive = 1)
ct_CM <- confusionMatrix(pr_ct, training$Survived, positive = "1")
pr_ct <- predict(rtTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, test$Survived, positive = "1")
ct_CM
library(pROC)
probsTrain<-predict(ctTune,training,type = "prob")
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
confusionMatrix(train,train$Survived, positive = 1)
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch !=0]<-1
summar(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
fancyRpartPlot(rtTune$finalModel)
pr_ct <- predict(rtTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, test$Survived, positive = "1")
ct_CM
###ROC Curve
library(pROC)
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch !=0]<-1
summar(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rf",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
plot(rtTune)
rtTune$bestTune
fancyRpartPlot(rtTune$finalModel)
pr_ct <- predict(rtTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, test$Survived, positive = "1")
ct_CM
###ROC Curve
library(pROC)
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
data<-read.csv("Tatanic/train.csv",na.strings=c("","NA"))
library(dplyr)
library(caret)
library(rpart)
library(stringr)
data$Parch[data$Parch !=0]<-1
summary(data)
col_names<-c("Survived","Pclass","Sex","Age","Embarked","Parch")
data[,col_names] <- lapply(data[,col_names], factor)
data$Age<-as.numeric(data$Age)
data$SibSp<-as.numeric(data$SibSp)
summary(data)
data<-data[,-c(1,4,9,11)]
data<-na.omit(data)
summary(data)
set.seed(96)
inTrain <- createDataPartition(data$Survived, p = .8,
list = FALSE,
times = 1)
training <- data[inTrain,]
test <- data[-inTrain,]
rtGrid <- expand.grid(cp=seq(0.001, 0.2, by = 0.001))
# alpha is between 0 and 1: 0 (ridge), 1 (lasso).
########################################## training model
ctrl <- trainControl(method = "cv", number = 10,
verboseIter = T)
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rf",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
set.seed(1)
rtTune <- train(Survived~ ., data = training,
method = "rpart",
tuneGrid = rtGrid,
metric='Kappa',
trControl = ctrl)
rtTune
#Random Forest
set.seed(1)
rfTune<-train(q42_~.,data=training,method="rf",
set.seed(1)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),
set.seed(1)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rfTune
plot(rfTune)
rfTune$bestTune
#prediction for randomForest
pr_ct <- predict(rfTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, test$Survived, positive = "1")
ct_CM
a
a
probsTrain<-predict(rfTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
rocCurve$sensitivities
set.seed(1)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
library(pROC)
probsTrain<-predict(rtTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
?train
set.seed(1)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),metric="Kappa"
prox=TRUE,allowParallel=TRUE)
rfTune<-train(Survived~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),metric="Kappa",
prox=TRUE,allowParallel=TRUE)
rfTune
plot(rfTune)
rfTune$bestTune
#prediction for randomForest
pr_ct <- predict(rfTune, newdata = test)
ct_CM <- confusionMatrix(pr_ct, test$Survived, positive = "1")
ct_CM
library(pROC)
probsTrain<-predict(rfTune,training,type = "prob")
rocCurve<-roc(response=training$Survived,predictor=probsTrain[,"1"],
levels = levels(as.factor(training$Survived)))
plot(rocCurve,print.thres="best")
names(rocCurve)
rocCurve$thresholds
